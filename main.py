import numpy as np
import matplotlib.pyplot as plt

# Simulation parameters
time_step = 1.0  # seconds
total_time = 600  # seconds (10 minutes)
num_steps = int(total_time / time_step)

# Constants
P_max = 100  # Max power dissipation of the CPU (in watts)
R_thermal = 0.1  # Thermal resistance (°C/W)
T_ambient = 25  # Ambient temperature (°C)
h_base = 0.02  # Base heat transfer coefficient at low fan speed (W/°C)
h_high = 0.05  # High fan speed heat transfer coefficient (W/°C)

# Variables to track
cpu_usage = np.linspace(0.5, 1.0, num_steps)  # Vary CPU usage from 50% to 100%
fan_speed = np.linspace(0.5, 1.0, num_steps)  # Vary fan speed from 50% to 100%
temperature = np.zeros(num_steps)  # Track CPU temperature
temperature[0] = T_ambient  # Initial temperature of the CPU is the ambient temperature

# Function to compute cooling rate based on fan speed
def cooling_rate(temp, fan_speed, T_ambient):
    h = h_base + (h_high - h_base) * fan_speed  # Linear interpolation of fan speed
    return h * (temp - T_ambient)

# Simulation loop
for i in range(1, num_steps):
    # Compute power generated by the CPU
    P = P_max * cpu_usage[i]  # Heat generated by CPU

    # Compute temperature rise due to heat generation
    delta_T = P * R_thermal

    # Calculate the cooling effect
    Q_cool = cooling_rate(temperature[i-1], fan_speed[i], T_ambient)

    # Update the CPU temperature
    temperature[i] = temperature[i-1] + delta_T * time_step - Q_cool * time_step

# Plot the results
plt.figure(figsize=(10, 6))
plt.plot(np.arange(0, total_time, time_step), temperature, label='CPU Temperature (°C)')
plt.plot(np.arange(0, total_time, time_step), cpu_usage * 100, label='CPU Usage (%)', linestyle='--')
plt.plot(np.arange(0, total_time, time_step), fan_speed * 100, label='Fan Speed (%)', linestyle='--')
plt.axhline(T_ambient, color='gray', linestyle='--', label='Ambient Temperature (°C)')

plt.xlabel('Time (seconds)')
plt.ylabel('Temperature (°C) / Usage (%)')
plt.title('Heat Dissipation Simulation in Data Center Device')
plt.legend()
plt.grid(True)
plt.show()

